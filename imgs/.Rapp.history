3.71385+3*pi/4
2*pi-0.572261
atan(-1)
atan(-1)-pi/2
(atan(-1)-pi/2)+pi
(atan(-1)-pi/2)+2*pi
(atan(-1))
(atan(-1))+pi
(atan(-1))+2*pi
(atan(-1))
(atan(-1))+pi
(atan(1))+pi
(atan(-1))+pi
(atan(-1))+2*pi
49995/(1*10^6)
1/sqrt(2)
1/sqrt(2)-0.707107
(1/sqrt(2)-0.707107)>0.001
1/sqrt(2)
asin(4/5)
sin(4/5)
sin(3/5)
asin(3/5)
acos(3/5)
acos(3/5)*180/pi
acos(4/5)*180/pi
asin(4/5)*180/pi
asin(3/5)
124/2
126/2
.26/2
1/16
0.062*10^6
pi/4
pi/4+pi
163/5
126/4
(10^6)*0.24
7500*7500
10000*10000
(7500*7500)/(10000*10000)
2740/60
1300/60
21*100/60
21*1000/(60*24)
21*20/(60)
21*50/(60)
24-17
24-15
1290/60
22*50/(60)
50/3
library(Rcpp)#
#
sourceCpp("/Users/student/Documents/subsample.cpp")#
#
#subsample("/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Captures.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Sensors.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Settings.csv")#
#
subsample("/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Sensors.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Settings.csv")
sourceCpp("/Users/student/Documents/subsample.cpp")
library(Rcpp)#
#
sourceCpp("/Users/student/Documents/subsample.cpp")#
#
#captures<-c("/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Captures.csv",#
#"/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=51-101,StepLength=300,CorrWalkMaxAngleChange=3.14159,Captures.csv")#
captures<-c("/Users/student/Documents/Bats/Simulations/Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=0,Captures.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=51-101,StepLength=300,CorrWalkMaxAngleChange=0,Captures.csv")#
#
captures1<-c("/Users/student/Documents/Bats/Simulations/Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=0,Captures.csv")#
settings<-"/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Settings.csv"#
sensors<-"/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Sensors.csv"#
#
subsample(captures,sensors,settings)
library(plotKML)
data(eberg_contours)
plotKML(eberg_contours)
plotKML(eberg)
data(eberg)
coordinates(eberg)<- Â±X+Y
coordinates(eberg)<- ~X+Y
plotKML(eberg["CLYNET_A"])
names(eberg)
plotKML(eberg["CLYMHT_A"])
library(sp)
plotKML(eberg["CLYNET_A"])
plotKML(eberg["CLYNET_A",])
plotKML(eberg_contours)
getwd()
library(CircStats)
?dwrcauchy
?dwrpcauchy
dweibull
?dweibull
plot(rweibull(1000,8,1))
hist(rweibull(1000,8,1))
hist(rweibull(1000,800,1))
hist(rweibull(1000,8,800))
4/27
3/27
3.5/27
3.5/27.5
7*8
7*4
7*4*6
26*26
4*8
5000/750
360-90-138
132/3
132/3*2
1+8+8+6
13+16+18+15+16
7.38*37.5
7.38*37.5*4*3
8.8*37.5*4*3
8.8*37.5
65*5*6
65*5*4*3
37.68/pi
sqrt(37.68/pi)
2*sqrt(2)
sqrt(37.68)
sqrt(37.68)/pi
sqrt(37.68/pi)
1/sqrt(37.68/pi)
13/47
29/47
36/47
4/47
sqrt(2^2+2^2)
9109*4
9109/4
9109/(24*4)
900/60
9109/(24*4)
0.176/0.469
(0.469-0.176)/0.469
38/4
5*5
5*6
5*1
5*5+5
5*10+5
24-7
20/180
1/9
100/180
5/9
exp(4.23)
exp(7)
1.74533/pi
1.74533/pi*180
1.0472/pi*180
library(R2WinBUGS)
?R2WinBUGS
2228/60
sample(1:10,10000,replace=T)
2014-1972
55 - 2014+1972
exp(0.8423)/(1+exp(0.8423))
exp(-7.926)/(1+exp(-7.926))
exp(-7.2)/(1+exp(-7.2))
exp(-6.23)/(1+exp(-6.236))
exp(0.435)/(1+exp(0.435))
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
#DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_IMG<-"/Users/student/Documents/Bats/Temp"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct2013Perch0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct2013Perch0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)#
#
##################################
# Load Data						##
##################################
loadindata<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,TestCounts.csv",header=FALSE)
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:4),-1]#
header<-x[c(1:4),-1]#
#
timerow<-which(x[,1]=="Time")#
sensorrow<-which(x[,1]=="Sensor")#
callrow<-which(x[,1]=="Call")#
densityrow<-which(x[,1]=="Density")#
#
ModelSelection<-matrix(nrow=4,ncol=3)#
ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
ModelSelection[2,]<-c(0,1.428 , "p343") # #
ModelSelection[3,]<-c(1,3.14159, "p221") # #
ModelSelection[4,]<-c(1,1.428 , "p322") # #
#
TimeMax<-25*60*60*24#
DensityMax<-NoofAnimals/(Area)#
#
#setwd(DIR_IMG)#
#pdf("ResultsNumberCaptures.pdf")#
plot(0,0,ylim=c(-70,70),xlim=c(0,2000),#
	type="n",#
	axes=FALSE,ylab="",xlab="Average number of captures")#
#
x<-seq(0,10000,by=2000)#
axis(side=1,at=(round(x)),labels=(round(x)),las=2)#
axis(2)#
mtext(text=expression(paste("Absolute error",sep="")),side=2,line=2)#
legend(x=0,y=70,col=1:4,pch=rep(1,4), #
		legend=c(paste("Model",ModelSelection[1,3]),#
				paste("Model",ModelSelection[2,3]),#
				paste("Model",ModelSelection[3,3]),#
				paste("Model",ModelSelection[4,3])#
				)#
	)#
#
matrixcaps<-matrix(ncol=4,nrow=1000)#
for(i in 1:4){#
	CamerarowI	<-which(ModelSelection[i,1]==Cameras[,1])	#
	CameraWidthI<-Cameras[CamerarowI,5]*2	#
	CameraRadiI	<-Cameras[CamerarowI,6]#
	CallAngleI	<-as.numeric(ModelSelection[i,2])*2#
	print(paste("I:",i,ModelSelection[i,3]))#
	profilewidth<-calcProfileWidth(CallAngleI, CameraWidthI, CameraRadiI )#
	selectedcols<-which(header[sensorrow,]==ModelSelection[i,1] & header[callrow,]== ModelSelection[i,2])#
	allList<-vector(mode="list",length=4)#
	Var<-c()#
	for(time in 1:length(selectedcols)){#
		Column<-selectedcols[time]#
		TimeVal<-header[timerow,Column]*StepLength#
		DensityVal<-header[densityrow,Column]/Area#
		Biasvector<-c()#
		Numbvector<-c()#
		Estvector<-c()#
		allList[[time]]<-Time#
		for(iteration in 1:dim(Data)[1]){#
			number<- Data[iteration,Column]#
			#print(paste("iteration",number))#
			estimate<-(1/profilewidth[[1]])*number/(Speed*TimeVal)#
			Numbvector<-c(Numbvector,number)#
			Biasvector<-c(Biasvector,(estimate-DensityVal)*(1000^2))#
			Estvector<-c(Estvector,estimate*(1000^2))#
			Percentvector<-c(Biasvector,100*(estimate-DensityVal)*(1000^2)/(DensityVal*(1000^2)))#
			#matrixcaps[i, number]<-sum(matrixcaps[i, number],Biasvector)#
			if(number<2000){#
			#plotCI(x=meanCaps,meanest,uiw=seest*1.96,col=i,add=T)#
			points(x=number,y=(estimate-DensityVal)*(1000^2),col=i)#
		}#
		}#
		meanest<-mean(Percentvector)#
		sdest<-sd(Percentvector,na.rm=T)	#
		seest<-sdest/10#
			print(paste("Mean No.of Caps: ", mean(Numbvector), " Standard Dievation: ", sdest))#
		#caps<-round(meanCaps/100)#
		#matrixcaps[time,caps]<-#
		#meanCaps<-mean(Numbvector)#
		#if(meanCaps<1000){#
			#plotCI(x=meanCaps,meanest,uiw=seest*1.96,col=i,add=T)#
			#points(x=)#
		#}#
		testvalue<-wilcox.test(meanest, mu=0)$p.value#
		if(testvalue<0.05){plotCI(err="n",x=TimeVal,y=meanest+seest*3,pch="*",col=i)#
							print("SIGNIFICANT FOUND")}#
		if(sd(Percentvector,na.rm=T)>5){ print(paste("STANDARD ERROR GREATER THAN 5",#
													"Distance",round(TimeVal*Speed/(1000)),#
													"Standard error",sd(Percentvector,na.rm=T)))}#
		#if(time==1){Var=Estvector}#
		#else{print(leveneTest(c(Estvector, Var)~c(rep("1",length(Estvector)),rep("0",length(Var)))))#
         #}#
	}#
}#
#
abline(h=0,lty=2,col="grey")#
box()#
#dev.off()
Data[1:10,1:10]
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
#DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_IMG<-"/Users/student/Documents/Bats/Temp"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("ModelSelect.R")#
source("subfunctions.R")#
#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-5#100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)#
#
##################################
# Load Data						##
##################################
loadindata<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,TestCounts.csv",header=FALSE)#
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:3),-1]#
header<-x[c(1:3),-1]#
#
capsrow<-which(x[,1]=="Captures")#
sensorrow<-which(x[,1]=="Sensor")#
callrow<-which(x[,1]=="Call")#
estimatesmatrix<-matrix(nrow=dim(Data)[1]+3,ncol=dim(Data)[2])#
#
for(i in 1:dim(Data)[2]){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}#
#
testcases<-estimatesmatrix[,which(estimatesmatrix[2,]=="Y")]#
NW1<-testcases[,which(testcases[1,]=="NW1")]#
SW1<-testcases[,which(testcases[1,]=="SW1")]#
NE1<-testcases[,which(testcases[1,]=="NE1")]#
SE3<-testcases[,which(testcases[1,]=="SE3")]#
PlusMinusPerError<-70#
#
maxval<-(dim(Data)[1]+3)#
yval<-10#
#
setwd(DIR_SAVE)#
pdf("ResultsNoCaptures.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
	box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NW1",side=3,line=0)#
for(i in 1:dim(NW1)[2]){#
	data<-as.numeric(NW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NW1[3,i])/10, axes=FALSE,col=COLset2[1])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SW1",side=3,line=0)#
for(i in 1:dim(SW1)[2]){#
	data<-as.numeric(SW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SW1[3,i])/10, axes=FALSE,col=COLset2[2])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SE3",side=3,line=0)#
for(i in 1:dim(SE3)[2]){#
	data<-as.numeric(SE3[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SE3[3,i])/10, axes=FALSE,col=COLset2[3])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NE1",side=3,line=0)#
for(i in 1:dim(NE1)[2]){#
	data<-as.numeric(NE1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NE1[3,i])/10, axes=FALSE,col=COLset2[4])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
#
mtext(side=1,text="Number of captures",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
#DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_IMG<-"/Users/student/Documents/Bats/Temp"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("ModelSelect.R")#
source("subfunctions.R")#
#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-5#100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)#
#
##################################
# Load Data						##
##################################
loadindata<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,TestCounts.csv",header=FALSE)#
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:3),-1]#
header<-x[c(1:3),-1]#
#
capsrow<-which(x[,1]=="Captures")#
sensorrow<-which(x[,1]=="Sensor")#
callrow<-which(x[,1]=="Call")#
estimatesmatrix<-matrix(nrow=dim(Data)[1]+3,ncol=dim(Data)[2])#
#
for(i in 1:dim(Data)[2]){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}#
#
testcases<-estimatesmatrix[,which(estimatesmatrix[2,]=="Y")]#
NW1<-testcases[,which(testcases[1,]=="NW1")]#
SW1<-testcases[,which(testcases[1,]=="SW1")]#
NE1<-testcases[,which(testcases[1,]=="NE1")]#
SE3<-testcases[,which(testcases[1,]=="SE3")]#
PlusMinusPerError<-70#
#
maxval<-(dim(Data)[1]+3)#
yval<-10#
#
setwd(DIR_SAVE)#
#pdf("ResultsNoCaptures.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
	box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NW1",side=3,line=0)#
for(i in 1:dim(NW1)[2]){#
	data<-as.numeric(NW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NW1[3,i])/10, axes=FALSE,col=COLset2[1])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SW1",side=3,line=0)#
for(i in 1:dim(SW1)[2]){#
	data<-as.numeric(SW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SW1[3,i])/10, axes=FALSE,col=COLset2[2])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SE3",side=3,line=0)#
for(i in 1:dim(SE3)[2]){#
	data<-as.numeric(SE3[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SE3[3,i])/10, axes=FALSE,col=COLset2[3])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NE1",side=3,line=0)#
for(i in 1:dim(NE1)[2]){#
	data<-as.numeric(NE1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NE1[3,i])/10, axes=FALSE,col=COLset2[4])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
#
mtext(side=1,text="Number of captures",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
#dev.off()
NW1
for(i in 1:dim(Data)[2]){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}
profile
model
Time
print(mean(Time/(60*60)))
((1/profile)*Captures/(Speed*Time))*(1000^2)
Speed
Captures
dim(Data)
Data[,847]
capsrow
header[capsrow]
header[capsrow,847]
header
capsrow
header[capsrow]
header[847,capsrow]
header[capsrow,]
header[capsrow,800]
for(i in 1:837){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}
Captures
i
header[,837]
for(i in 1:836){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}
Captures
((1/profile)*Captures/(Speed*Time))*(1000^2)
((1/profile)*Captures/(Speed*Time))
Captures
Time
Time
Time/(60*60)
Time/(60*60*24)
library(CircStats)
rwrpcauchy(n=10,location=0,rho =0.2)
Data[1:10,1:10]
x[1:10,1:10]
x[1:4,1:10]
?rnorm
?rbeta
rbeta(1,1,5)
hist(rbeta(1,1,5))
plot(density(rbeta(1,1,5)))
plot(density(rbeta(100,1,5)))
plot(density(rbeta(1000,1,5)))
plot(density(rbeta(10000,1,5)))
plot(density(rbeta(10000,2,2)))
plot(density(rbeta(10000,1,5)))
plot(density(rbeta(10000,2,5)))
plot(density(rbeta(10000,8,5)))
plot(density(rbeta(10000,10,5)))
plot(density(rbeta(10000,12,5)))
plot(density(rbeta(10000,20,5)))
plot(density(rbeta(10000,50,5)))
plot(density(rbeta(10000,100,5)))
plot(density(rbeta(10000,100,5)),xlim=c(0,1))
plot(density(rbeta(10000,12,5)),xlim=c(0,1))
plot(density(rbeta(10000,2,5)),xlim=c(0,1))
plot(density(rbeta(10000,2,1)),xlim=c(0,1))
plot(density(rbeta(10000,12,1)),xlim=c(0,1))
plot(density(rbeta(10000,12,2)),xlim=c(0,1))
plot(density(rbeta(10000,1,2)),xlim=c(0,1))
plot(density(rbeta(10000,1,5)),xlim=c(0,1))
plot(density(rbeta(10000,10,5)),xlim=c(0,1))
plot(density(rbeta(10000,1,5)),xlim=c(0,1))
?dcat
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
#DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_IMG<-"/Users/student/Documents/Bats/Temp"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("ModelSelect.R")#
source("subfunctions.R")#
#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-5#100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)#
#
##################################
# Load Data						##
##################################
loadindata<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,TestCounts6Aug.csv",header=FALSE)#
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:3),-1]#
header<-x[c(1:3),-1]#
#
capsrow<-which(x[,1]=="Captures")#
sensorrow<-which(x[,1]=="Sensor")#
callrow<-which(x[,1]=="Call")#
estimatesmatrix<-matrix(nrow=dim(Data)[1]+3,ncol=dim(Data)[2])#
#
#for(i in 1:dim(Data)[2]){#
for(i in 1:836){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}#
#
testcases<-estimatesmatrix[,which(estimatesmatrix[2,]=="Y")]#
NW1<-testcases[,which(testcases[1,]=="NW1")]#
SW1<-testcases[,which(testcases[1,]=="SW1")]#
NE1<-testcases[,which(testcases[1,]=="NE1")]#
SE3<-testcases[,which(testcases[1,]=="SE3")]#
PlusMinusPerError<-70#
#
maxval<-(dim(Data)[1]+3)#
yval<-10#
#
setwd(DIR_SAVE)#
#pdf("ResultsNoCaptures.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
	box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NW1",side=3,line=0)#
for(i in 1:dim(NW1)[2]){#
	data<-as.numeric(NW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NW1[3,i])/10, axes=FALSE,col=COLset2[1])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SW1",side=3,line=0)#
for(i in 1:dim(SW1)[2]){#
	data<-as.numeric(SW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SW1[3,i])/10, axes=FALSE,col=COLset2[2])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SE3",side=3,line=0)#
for(i in 1:dim(SE3)[2]){#
	data<-as.numeric(SE3[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SE3[3,i])/10, axes=FALSE,col=COLset2[3])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NE1",side=3,line=0)#
for(i in 1:dim(NE1)[2]){#
	data<-as.numeric(NE1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NE1[3,i])/10, axes=FALSE,col=COLset2[4])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
#
mtext(side=1,text="Number of captures",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
#dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
#DIR_IMG<-"/Users/student/Documents/Bats/Temp"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("ModelSelect.R")#
source("subfunctions.R")#
#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-5#100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)#
#
##################################
# Load Data						##
##################################
loadindata<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,TestCounts6Aug.csv",header=FALSE)#
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:3),-1]#
header<-x[c(1:3),-1]#
#
capsrow<-which(x[,1]=="Captures")#
sensorrow<-which(x[,1]=="Sensor")#
callrow<-which(x[,1]=="Call")#
estimatesmatrix<-matrix(nrow=dim(Data)[1]+3,ncol=dim(Data)[2])#
#
#for(i in 1:dim(Data)[2]){#
for(i in 1:836){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}#
#
testcases<-estimatesmatrix[,which(estimatesmatrix[2,]=="Y")]#
NW1<-testcases[,which(testcases[1,]=="NW1")]#
SW1<-testcases[,which(testcases[1,]=="SW1")]#
NE1<-testcases[,which(testcases[1,]=="NE1")]#
SE3<-testcases[,which(testcases[1,]=="SE3")]#
PlusMinusPerError<-70#
#
maxval<-(dim(Data)[1]+3)#
yval<-10#
#
setwd(DIR_SAVE)#
pdf("ResultsNoCaptures.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
	box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NW1",side=3,line=0)#
for(i in 1:dim(NW1)[2]){#
	data<-as.numeric(NW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NW1[3,i])/10, axes=FALSE,col=COLset2[1])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SW1",side=3,line=0)#
for(i in 1:dim(SW1)[2]){#
	data<-as.numeric(SW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SW1[3,i])/10, axes=FALSE,col=COLset2[2])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SE3",side=3,line=0)#
for(i in 1:dim(SE3)[2]){#
	data<-as.numeric(SE3[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SE3[3,i])/10, axes=FALSE,col=COLset2[3])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NE1",side=3,line=0)#
for(i in 1:dim(NE1)[2]){#
	data<-as.numeric(NE1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NE1[3,i])/10, axes=FALSE,col=COLset2[4])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
#
mtext(side=1,text="Number of captures",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
#DIR_IMG<-"/Users/student/Documents/Bats/Temp"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("ModelSelect.R")#
source("subfunctions.R")#
#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-5#100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)#
#
##################################
# Load Data						##
##################################
loadindata<-read.csv("Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,TestCounts6Aug.csv",header=FALSE)#
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:3),-1]#
header<-x[c(1:3),-1]#
#
capsrow<-which(x[,1]=="Captures")#
sensorrow<-which(x[,1]=="Sensor")#
callrow<-which(x[,1]=="Call")#
estimatesmatrix<-matrix(nrow=dim(Data)[1]+3,ncol=dim(Data)[2])#
#
#for(i in 1:dim(Data)[2]){#
for(i in 1:836){#
	print(paste(i,"/",dim(Data)[2]))#
	profile<-cameraprofile(SensorNo=header[sensorrow,i], SensorInfo=Cameras, Callwidth=header[callrow,i]*2)[[1]]#
	model<-pickmodel(sensor=Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle*2,call=header[callrow,i]*2)#
	estimatesmatrix[1,i]<-model#
	print("model select")#
	if((header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.04720)||#
		(header[callrow,i] == 3.14159 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)||#
		(header[callrow,i] == 1.428 & Cameras[which(header[sensorrow,i]==Cameras$ID),]$HalfWidthAngle == 1.74533)#
	){estimatesmatrix[2,i]<-"Y"}else{estimatesmatrix[2,i]<-"N"}#
	estimatesmatrix[3,i]<-header[capsrow,i]#
	print("time")#
	Time<-Data[,i]#
	print(mean(Time/(60*60)))#
	Captures<-header[capsrow,i]#
	estimatesmatrix[4:(dim(Data)[1]+3),i]<-((1/profile)*Captures/(Speed*Time))*(1000^2)#
}#
#
testcases<-estimatesmatrix[,which(estimatesmatrix[2,]=="Y")]#
NW1<-testcases[,which(testcases[1,]=="NW1")]#
SW1<-testcases[,which(testcases[1,]=="SW1")]#
NE1<-testcases[,which(testcases[1,]=="NE1")]#
SE3<-testcases[,which(testcases[1,]=="SE3")]#
PlusMinusPerError<-70#
#
maxval<-(dim(Data)[1]+3)#
yval<-10#
#
setwd(DIR_IMG)#
pdf("ResultsNoCaptures.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
	box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NW1",side=3,line=0)#
for(i in 1:dim(NW1)[2]){#
	data<-as.numeric(NW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NW1[3,i])/10, axes=FALSE,col=COLset2[1])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SW1",side=3,line=0)#
for(i in 1:dim(SW1)[2]){#
	data<-as.numeric(SW1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SW1[3,i])/10, axes=FALSE,col=COLset2[2])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="SE3",side=3,line=0)#
for(i in 1:dim(SE3)[2]){#
	data<-as.numeric(SE3[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(SE3[3,i])/10, axes=FALSE,col=COLset2[3])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
plot(0,0,type="n",xlim=c(1,yval),ylim=c(0-PlusMinusPerError,0+PlusMinusPerError),#
	ylab="",xlab="", axes=FALSE#
	,main="")#
box()#
abline(h=0,lty=2,col="grey")#
mtext(side=1,at=c(2,4,6,8,10),text=expression(20,40,60,80,100),line=1)#
mtext(side=2,at=c(-PlusMinusPerError,0,PlusMinusPerError),text=c(-PlusMinusPerError,0,PlusMinusPerError),line=1)#
mtext(text="NE1",side=3,line=0)#
for(i in 1:dim(NE1)[2]){#
	data<-as.numeric(NE1[4:maxval,i])#
	dataerr<-data - Density*1000^2#
	boxplot(dataerr,add=T, at=as.numeric(NE1[3,i])/10, axes=FALSE,col=COLset2[4])#
	print(paste("Number of caps:",as.numeric(NW1[3,i])/10 ,"CV",sd(data)/mean(data)))#
}#
#
mtext(side=1,text="Number of captures",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("LoadIn.R")#
setwd(DIR_CODE)#
source("Output.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
##################################
# Functions						##
##################################
#
PlotAddpoint<-function(x, Cameras,ModelSelect, NoOfSteps, Speed, Xval){#
	datafortim<-matrix(ncol=102,nrow=0);#
	print("PlotAddpoint")#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}#
#
	Output<-CalBias(ModelSelection, Cameras,x, Speed)#
	print("Finished Output")#
	TimeOfInterest<-NoOfSteps#
	#TimeOfInterest<-NoOfSteps/2#
#
	for(ModelNumber in 1:4){#
		print(paste("ModelNumber:", ModelNumber))#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			print(paste("number:", number,"model[[number]]$Time",model[[number]]$Time))#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias,"sdbias",sdbias))#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				boxplot(model[[number]]$Percent,add=T,at=Xval)#
			}	#
		}#
	}#
	return(datafortim)#
}#
##################################
# Plot				##
##################################
setwd(DIR_SAVE)#
pdf("ResultsTort.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "REM") # REM#
	ModelSelection[2,]<-c(0,1.428 , "") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
	par(mfrow=c(4,1))#
	plot(0,0,type="n",#
		ylim=c(-5,5),#
		xlim=c(-0.5,pi),#
		ylab="",xlab="Angle of correlated walk")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	#legend(x=0,y=5,col=1:4,pch=rep(1,4), #
	#	legend=c(paste("Model",ModelSelection[1,3]),#
	#			paste("Model",ModelSelection[2,3]),#
	#			paste("Model",ModelSelection[3,3]),#
	#			paste("Model",ModelSelection[4,3])#
	#			)#
	#)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159,timenosubs14400"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",time.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=1.0472,timenosubs14400"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",time.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=2.0944,timenosubs14400"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",time.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,timenosubs14400"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",time.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras, ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
dev.off()#
#
model<-c("NW1","SW1","SE3","NE1")#
#xlab="Maximum change in direction at each step (radians)"#
#
setwd(DIR_SAVE)#
pdf("ResultsTort.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("LoadIn.R")#
setwd(DIR_CODE)#
source("Output.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
##################################
# Functions						##
##################################
#
PlotAddpoint<-function(x, Cameras,ModelSelect, NoOfSteps, Speed, Xval){#
	datafortim<-matrix(ncol=102,nrow=0);#
	print("PlotAddpoint")#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}#
#
	Output<-CalBias(ModelSelection, Cameras,x, Speed)#
	print("Finished Output")#
	TimeOfInterest<-NoOfSteps#
	#TimeOfInterest<-NoOfSteps/2#
#
	for(ModelNumber in 1:4){#
		print(paste("ModelNumber:", ModelNumber))#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			print(paste("number:", number,"model[[number]]$Time",model[[number]]$Time))#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias,"sdbias",sdbias))#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				boxplot(model[[number]]$Percent,add=T,at=Xval)#
			}	#
		}#
	}#
	return(datafortim)#
}#
##################################
# Plot				##
##################################
setwd(DIR_SAVE)#
pdf("ResultsTort.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "REM") # REM#
	ModelSelection[2,]<-c(0,1.428 , "") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
	par(mfrow=c(4,1))#
	plot(0,0,type="n",#
		ylim=c(-5,5),#
		xlim=c(-0.5,pi),#
		ylab="",xlab="Angle of correlated walk")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	#legend(x=0,y=5,col=1:4,pch=rep(1,4), #
	#	legend=c(paste("Model",ModelSelection[1,3]),#
	#			paste("Model",ModelSelection[2,3]),#
	#			paste("Model",ModelSelection[3,3]),#
	#			paste("Model",ModelSelection[4,3])#
	#			)#
	#)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=1.0472"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=2.0944"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras, ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
dev.off()#
#
model<-c("NW1","SW1","SE3","NE1")#
#xlab="Maximum change in direction at each step (radians)"#
#
setwd(DIR_SAVE)#
pdf("ResultsTort.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("LoadIn.R")#
setwd(DIR_CODE)#
source("Output.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
##################################
# Functions						##
##################################
#
PlotAddpoint<-function(x, Cameras,ModelSelect, NoOfSteps, Speed, Xval){#
	datafortim<-matrix(ncol=102,nrow=0);#
	print("PlotAddpoint")#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}#
#
	Output<-CalBias(ModelSelection, Cameras,x, Speed)#
	print("Finished Output")#
	TimeOfInterest<-NoOfSteps#
	#TimeOfInterest<-NoOfSteps/2#
#
	for(ModelNumber in 1:4){#
		print(paste("ModelNumber:", ModelNumber))#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			print(paste("number:", number,"model[[number]]$Time",model[[number]]$Time))#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias,"sdbias",sdbias))#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				boxplot(model[[number]]$Percent,add=T,at=Xval)#
			}	#
		}#
	}#
	return(datafortim)#
}#
##################################
# Plot				##
##################################
setwd(DIR_SAVE)#
pdf("ResultsTort.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "REM") # REM#
	ModelSelection[2,]<-c(0,1.428 , "") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
	par(mfrow=c(4,1))#
	plot(0,0,type="n",#
		ylim=c(-5,5),#
		xlim=c(-0.5,pi),#
		ylab="",xlab="Angle of correlated walk")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	#legend(x=0,y=5,col=1:4,pch=rep(1,4), #
	#	legend=c(paste("Model",ModelSelection[1,3]),#
	#			paste("Model",ModelSelection[2,3]),#
	#			paste("Model",ModelSelection[3,3]),#
	#			paste("Model",ModelSelection[4,3])#
	#			)#
	#)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=1.0472"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=2.0944"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras, ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
dev.off()#
#
model<-c("NW1","SW1","SE3","NE1")#
#xlab="Maximum change in direction at each step (radians)"#
#
setwd(DIR_SAVE)#
pdf("ResultsTort.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
dev.off()
##################################
# Plot				##
##################################
setwd(DIR_IMG)#
#pdf("ResultsTort.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "REM") # REM#
	ModelSelection[2,]<-c(0,1.428 , "") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
	par(mfrow=c(4,1))#
	plot(0,0,type="n",#
		ylim=c(-5,5),#
		xlim=c(-0.5,pi),#
		ylab="",xlab="Angle of correlated walk")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	#legend(x=0,y=5,col=1:4,pch=rep(1,4), #
	#	legend=c(paste("Model",ModelSelection[1,3]),#
	#			paste("Model",ModelSelection[2,3]),#
	#			paste("Model",ModelSelection[3,3]),#
	#			paste("Model",ModelSelection[4,3])#
	#			)#
	#)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=1.0472"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=2.0944"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras, ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
dev.off()
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
#dev.off()
par(mfrow=c(4,1))#
	plot(0,0,type="n",#
		ylim=c(-5,5),#
		xlim=c(-0.5,pi),#
		ylab="",xlab="Angle of correlated walk")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	#legend(x=0,y=5,col=1:4,pch=rep(1,4), #
	#	legend=c(paste("Model",ModelSelection[1,3]),#
	#			paste("Model",ModelSelection[2,3]),#
	#			paste("Model",ModelSelection[3,3]),#
	#			paste("Model",ModelSelection[4,3])#
	#			)#
	#)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)
temp
Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]
x
datafortim<-matrix(ncol=102,nrow=0);#
	print("PlotAddpoint")#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}
ModelSelect=1
datafortim<-matrix(ncol=102,nrow=0);#
	print("PlotAddpoint")#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}
Output<-CalBias(ModelSelection, Cameras,x, Speed)#
	print("Finished Output")#
	TimeOfInterest<-NoOfSteps
Output<-CalBias(ModelSelection, Cameras,x, Speed)#
	print("Finished Output")#
	TimeOfInterest<-NoOfSteps#
	#TimeOfInterest<-NoOfSteps/2#
#
	for(ModelNumber in 1:4){#
		print(paste("ModelNumber:", ModelNumber))#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			print(paste("number:", number,"model[[number]]$Time",model[[number]]$Time))#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias,"sdbias",sdbias))#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				boxplot(model[[number]]$Percent,add=T,at=Xval)#
			}	#
		}#
	}#
	return(datafortim)
datafortim
temp
number
Output
Output[[1]][[2]]
Output[[1]][[2]]$Percent
x
Time
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("LoadIn.R")#
setwd(DIR_CODE)#
source("Output.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
##################################
# Functions						##
##################################
#
PlotAddpoint<-function(x, Cameras,ModelSelect, NoOfSteps, Speed, Xval){#
	datafortim<-matrix(ncol=102,nrow=0);#
	print("PlotAddpoint")#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}#
#
	Output<-CalBias(ModelSelection, Cameras,x, Speed)#
	print("Finished Output")#
	TimeOfInterest<-14400#
	#TimeOfInterest<-NoOfSteps/2#
#
	for(ModelNumber in 1:4){#
		print(paste("ModelNumber:", ModelNumber))#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			print(paste("number:", number,"model[[number]]$Time",model[[number]]$Time))#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias,"sdbias",sdbias))#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				boxplot(model[[number]]$Percent,add=T,at=Xval)#
			}	#
		}#
	}#
	return(datafortim)#
}#
##################################
# Plot				##
##################################
setwd(DIR_IMG)#
#pdf("ResultsTort.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "REM") # REM#
	ModelSelection[2,]<-c(0,1.428 , "") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
	par(mfrow=c(4,1))#
	plot(0,0,type="n",#
		ylim=c(-5,5),#
		xlim=c(-0.5,pi),#
		ylab="",xlab="Angle of correlated walk")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	#legend(x=0,y=5,col=1:4,pch=rep(1,4), #
	#	legend=c(paste("Model",ModelSelection[1,3]),#
	#			paste("Model",ModelSelection[2,3]),#
	#			paste("Model",ModelSelection[3,3]),#
	#			paste("Model",ModelSelection[4,3])#
	#			)#
	#)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=3.14159"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=1.0472"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=2.0944"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Tort	 <-Settings[which(Settings[,1] %in% "CorrWalkMaxAngleChange"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras, ModelSelect=1, NoOfSteps, Speed, Tort)#
	datafortim<-rbind(datafortim,temp)#
#
dev.off()#
#
model<-c("NW1","SW1","SE3","NE1")#
#xlab="Maximum change in direction at each step (radians)"#
#
#setwd(DIR_SAVE)#
#pdf("ResultsTort.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
#dev.off()
setwd(DIR_IMG)#
pdf("ResultsTort.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
dev.off()
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"
setwd(DIR_IMG)#
pdf("ResultsTort.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,pi+0.2),#
		axes=FALSE,#
		ylab="",xlab=""#
		,main="")#
	box()#
	mtext(side=1,at=c(0,pi/3,2*pi/3,pi),text=expression(0,pi/3,2*pi/3,pi),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j],add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
#
mtext(side=1,text="Maximum change in direction at each step (radians)",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("LoadIn.R")#
setwd(DIR_CODE)#
source("Output.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
##################################
# Functions						##
##################################
#
PlotAddpoint<-function(x, Cameras,ModelSelect, NoOfSteps, Speed, Xval){#
		datafortim<-matrix(ncol=102,nrow=0);#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}#
#
	Output<-CalBias(ModelSelection, Cameras,x, Speed)#
#
	TimeOfInterest<-14400#
#
	for(ModelNumber in 1:4){#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				#print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias))#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
			}	#
		}#
	}#
	return(datafortim)#
}#
##################################
# Plot				##
##################################
setwd(DIR_SAVE)#
pdf("ResultsPerching.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
	ModelSelection[2,]<-c(0,1.428 , "p343") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
#
	plot(0,0,type="n",#
		ylim=c(-5,5),xlim=c(0,1),#
		ylab="",xlab="Proportion of time spent stationary")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	legend(x=0,y=5,col=1:4,pch=rep(1,4), #
		legend=c(paste("Model",ModelSelection[1,3]),#
				paste("Model",ModelSelection[2,3]),#
				paste("Model",ModelSelection[3,3]),#
				paste("Model",ModelSelection[4,3])#
				)#
	)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct2013Perch0.25,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Perch)#
datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct2013Perch0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=0, NoOfSteps, Speed, Perch)#
datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Perch)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct2013Perch0.75,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)	#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Perch)#
	datafortim<-rbind(datafortim,temp)#
dev.off()#
#
model<-c("NW1","SW1","SE3","NE1")#
#
setwd(DIR_IMG)#
pdf("ResultsPerch.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,0.75*5+0.2),#
		ylab="",xlab="", axes=FALSE#
		,main="")#
			box()#
	mtext(side=1,at=c(0,0.25*5,0.5*5,0.75*5),text=expression(0,0.25,0.5,0.75),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	box()#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j]*5,add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
mtext(side=1,text="Proportion of time spent stationary",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
dev.off()
##########################################################################
# Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
source("LoadIn.R")#
setwd(DIR_CODE)#
source("Output.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
##################################
# Functions						##
##################################
#
PlotAddpoint<-function(x, Cameras,ModelSelect, NoOfSteps, Speed, Xval){#
		datafortim<-matrix(ncol=102,nrow=0);#
	if(ModelSelect ==1){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(0,1.428 , "p343") # #
		ModelSelection[3,]<-c(1,3.14159, "p221") # #
		ModelSelection[4,]<-c(1,1.428 , "p322") # #
	} else if(ModelSelect == 0){#
		ModelSelection<-matrix(nrow=4,ncol=3)#
		ModelSelection[1,]<-c(2,3.14159, "p141") # REM#
		ModelSelection[2,]<-c(2,1.428 , "p343") # #
		ModelSelection[3,]<-c(4,3.14159, "p221") # #
		ModelSelection[4,]<-c(4,1.428 , "p322") # #
	}#
#
	Output<-CalBias(ModelSelection, Cameras,x, Speed)#
#
	TimeOfInterest<-14400#
#
	for(ModelNumber in 1:4){#
		model<-Output[[ModelNumber]]#
		for(number in 1:length(model)){#
			if(model[[number]]$Time==TimeOfInterest*(900)){#
				meanbias<-mean(model[[number]]$Percent,na.rm=T)#
				sdbias<-sd(model[[number]]$Percent,na.rm=T)	#
				sebias<-sdbias/10#
				#print(paste("Inside plot",number, "ModelNumber",ModelNumber, "meanbias",meanbias))#
				#plotCI(x=Xval,meanbias,uiw=sebias*1.96,col=ModelNumber,add=T)#
				temp<-matrix(ncol=102,nrow=1,c(ModelNumber,Xval,model[[number]]$Percent));#
				datafortim<-rbind(datafortim,temp)#
			}	#
		}#
	}#
	return(datafortim)#
}#
##################################
# Plot				##
##################################
setwd(DIR_SAVE)#
pdf("ResultsPerching.pdf")#
	datafortim<-matrix(ncol=102,nrow=0);#
#
	ModelSelection<-matrix(nrow=4,ncol=3)#
	ModelSelection[1,]<-c(0,3.14159, "p141") # REM#
	ModelSelection[2,]<-c(0,1.428 , "p343") # #
	ModelSelection[3,]<-c(1,3.14159, "p221") # #
	ModelSelection[4,]<-c(1,1.428 , "p322") # #
#
	plot(0,0,type="n",#
		ylim=c(-5,5),xlim=c(0,1),#
		ylab="",xlab="Proportion of time spent stationary")#
	mtext(text=expression(paste("Percentage error")),side=2,line=2)#
	legend(x=0,y=5,col=1:4,pch=rep(1,4), #
		legend=c(paste("Model",ModelSelection[1,3]),#
				paste("Model",ModelSelection[2,3]),#
				paste("Model",ModelSelection[3,3]),#
				paste("Model",ModelSelection[4,3])#
				)#
	)#
	abline(h=0,lty=2,col="grey")#
	box()#
#
	Name<-"Run23Oct201317July0.25,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Perch)#
datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]	#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=0, NoOfSteps, Speed, Perch)#
datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0.5,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Perch)#
	datafortim<-rbind(datafortim,temp)#
	Name<-"Run23Oct201317July0.75,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0"#
	setwd(DIR_DATA)	#
	Settings<-read.csv(paste(Name,",Settings.csv",sep=""))#
	Cameras<-read.csv(paste(Name,",Sensors.csv",sep=""))#
	NoOfSteps<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
	Perch	 <-Settings[which(Settings[,1] %in% "Perch"),2]#
	Speed<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
	loadindata<-read.csv(paste(Name,",timenosubs14400.csv",sep=""),header=FALSE)#
	x<-loadindata[,-dim(loadindata)[2]]#
	temp<-PlotAddpoint(x, Cameras,ModelSelect=1, NoOfSteps, Speed, Perch)#
	datafortim<-rbind(datafortim,temp)#
dev.off()#
#
model<-c("NW1","SW1","SE3","NE1")#
#
setwd(DIR_IMG)#
pdf("ResultsPerch.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,0.75*5+0.2),#
		ylab="",xlab="", axes=FALSE#
		,main="")#
			box()#
	mtext(side=1,at=c(0,0.25*5,0.5*5,0.75*5),text=expression(0,0.25,0.5,0.75),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	box()#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j]*5,add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
mtext(side=1,text="Proportion of time spent stationary",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
dev.off()
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"
setwd(DIR_IMG)#
pdf("ResultsPerch.pdf")#
par(mfrow=c(4,1),oma=c(3,3,0,0), mar=c(2,4,2,0.5))#
for(i in 1:4){#
	plot(0,0,type="n",#
		ylim=c(-4,4),#
		xlim=c(-0.2,0.75*5+0.2),#
		ylab="",xlab="", axes=FALSE#
		,main="")#
			box()#
	mtext(side=1,at=c(0,0.25*5,0.5*5,0.75*5),text=expression(0,0.25,0.5,0.75),line=1)#
	mtext(side=2,at=c(-4,0,4),text=expression(-4,0,4),line=1)#
	mtext(text=model[i],side=3,line=0)#
	box()#
	v<-vector(length=4)#
	temp<-datafortim[which(datafortim[,1]==i),]#
	tort<-sort(unique(temp[,2]))#
	for(j in 1:length(tort)){#
		d<-temp[which(temp[,2]==tort[j]),2:102]#
		boxplot(d[1,],at=tort[j]*5,add=T,col=COLset2[i],axes=FALSE)#
		v[j]<-var(d[1,])#
	}#
	print(v)#
	#print(var.test(temp[which(temp[,2]==tort[4]),2:102],temp[which(temp[,2]==tort[1]),2:102],alternative="greater"))#
	abline(h=0,col="grey",lty=2)#
}#
mtext(side=1,text="Proportion of time spent stationary",line=1.5,outer=TRUE)#
mtext(side=2,text="Percentage error",line=1.5,outer=TRUE)#
dev.off()
