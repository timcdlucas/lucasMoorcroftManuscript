abline(a=1b=sqrt(2))
abline(a=1,b=sqrt(2))
x<-seq(-1,1,by=0.001)
yminus<- - sqrt(1-(x^2))
yplus<- sqrt(1-(x^2))
y<-c(yminus,yplus)
plot(x,y)
x<-x(x,x)
x<-c(x,x)
plot(x,y)
abline(a=1,b=sqrt(2))
abline(h=0)
abline(v=0)
sqrt(2)
abline(a=1,b=sqrt(2)*2)
abline(a=sqrt(2),b=1)
pi/2
pi/4
tan(pi/2)
pi
2/80*100
5/80*100
cos(1)
cos(2)
cos(4)
cos(6)
sin(1)
sin(2)
sin(4)
sin(6)
6/3.5
3.5/6
plot(type="n", ylim=c(970,1130),xlim=c(1490,1510))
plot(type="n", ylim=c(970,1130),xlim=c(1490,1510),x=0)
points(pch="B", x=1504.56,y=989.99)
points(pch="D", x=1500,y=1000)
atan((4.56)/(1000-989.99))
(1000-989.99)
atan((-4.56)/(1000-989.99))
atan((-4.56)/(1000-989.99))+2*pi
100*100
library(circular)
library("circular")
rvonmises
?RvonmisesRad
RvonmisesRad
conversion.circular
exp(4)
log(50)
log(-1)
exp(-1)
exp(4)
exp(2)
2000/24
2000/(24*60)
exp(2000)/(24*60)
exp(1000)/(24*60)
exp(2)/(24*60)
exp(2000)
log(2000)
exp(2)
exp(3)
20/(24*60)
1000*20/(24*60)
200/60
3.5*1000
3.5*1000/60
25*25
exp(4)
60*1000/(24*60)
55*1000/(24*60)
exp(-4)
exp(-4)*1000/(24*60)
exp(-4)*1000/(24*60*60)
exp(4)*1000/(24*60*60)
100/(24*60*60)
100/(60*60)
100*1609.344/(60*60)
exp(4)*1000/(24*60*60)
plot(0,0,type="n",xlim=c(3700,3800),ylim=c(3700,3800))
points(type="l",x=c(3737.99,3719.61),y=c(3730.42,3704.6))
plot(0,0,type="n",xlim=c(3700,3800),ylim=c(3700,3800))
points(type="l",x=c(3737.99,3719.61),y=c(3730.42,3704.6))
points(type="l",x=c(3756.23,3737.99),y=c(3737.99,3730.42),col="red")
points(type="l",y=c(3756.23,3737.99),x=c(3737.99,3730.42),col="red")
plot(0,0,type="n",xlim=c(3700,3800),ylim=c(3700,3800))
points(type="l",x=c(3737.99,3719.61),y=c(3730.42,3704.6))
points(type="l",x=c(3756.23,3737.99),y=c(3756.23,3730.42),col="red")
points(x=3744.97,y=3740.22,col="blue")
1.5/24
24/1.5
16*1.5
30*1000
30*1000/(60*24)
500/24
1000/16
1000/(16*24)
?rasterImage
24-17
sqrt((3733.12-3785.32)^2 + (3809.77-3833.37)^2)
atan((3733.12-3785.32) / (3809.77-3833.37))
atan( (3809.77-3833.37)/ (3733.12-3785.32) )
atan( (-3809.77+3833.37)/ (3733.12-3785.32) )
atan( (-3809.77+3833.37)/ (3733.12-3785.32) )+(2*pi)
atan((3733.12-3785.32)/ (-3809.77+3833.37))+(2*pi)
atan((3753.59-3620.43)/ (3735.43-3821.21))
atan((3753.59-3620.43)/ (3735.43-3821.21))+Pi
atan((3753.59-3620.43)/ (3735.43-3821.21))+pi
(3753.59-3620.43)/ (3735.43-3821.21)
((3753.59-3620.43)/ (3735.43-3821.21))*3735.43-3753.59
(()(3753.59-3620.43)/ (3735.43-3821.21))*3735.43)-3753.59
(((3753.59-3620.43)/ (3735.43-3821.21))*3735.43)-3753.59
sqrt((3753.59-  3577.82)^2 + (3735.43 - 3848.66)^2)
atan((3753.59-  3577.82)/ (3735.43 - 3848.66))
atan((3753.59-  3577.82)/ (3735.43 - 3848.66))+(2*pi)
3733.53 XandY[v*2]: 3761.34 previous_y_animal: 3605.85 previous_x_animal: 3798.94
plot(y=c(3733.53,3605.85),x=c(3761.34,3798.94))
3758.83 XandY[v*2]: 3732.06 previous_y_animal: 3816.17 previous_x_animal: 3695.12 current_y_animal: 3862.54 location_x_animal: 3665.25
plot(y=c(3758.83,3816.17,3862.54),x=c(3732.06,3695.12,3665.25))
3.71385+pi/2
3.71385+3*pi/4
2*pi-0.572261
atan(-1)
atan(-1)-pi/2
(atan(-1)-pi/2)+pi
(atan(-1)-pi/2)+2*pi
(atan(-1))
(atan(-1))+pi
(atan(-1))+2*pi
(atan(-1))
(atan(-1))+pi
(atan(1))+pi
(atan(-1))+pi
(atan(-1))+2*pi
49995/(1*10^6)
1/sqrt(2)
1/sqrt(2)-0.707107
(1/sqrt(2)-0.707107)>0.001
1/sqrt(2)
asin(4/5)
sin(4/5)
sin(3/5)
asin(3/5)
acos(3/5)
acos(3/5)*180/pi
acos(4/5)*180/pi
asin(4/5)*180/pi
asin(3/5)
124/2
126/2
.26/2
1/16
0.062*10^6
pi/4
pi/4+pi
163/5
126/4
(10^6)*0.24
7500*7500
10000*10000
(7500*7500)/(10000*10000)
2740/60
1300/60
21*100/60
21*1000/(60*24)
21*20/(60)
21*50/(60)
24-17
24-15
1290/60
22*50/(60)
50/3
library(Rcpp)#
#
sourceCpp("/Users/student/Documents/subsample.cpp")#
#
#subsample("/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Captures.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Sensors.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Settings.csv")#
#
subsample("/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Sensors.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Settings.csv")
sourceCpp("/Users/student/Documents/subsample.cpp")
library(Rcpp)#
#
sourceCpp("/Users/student/Documents/subsample.cpp")#
#
#captures<-c("/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Captures.csv",#
#"/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=51-101,StepLength=300,CorrWalkMaxAngleChange=3.14159,Captures.csv")#
captures<-c("/Users/student/Documents/Bats/Simulations/Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=0,Captures.csv","/Users/student/Documents/Bats/Simulations/Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=51-101,StepLength=300,CorrWalkMaxAngleChange=0,Captures.csv")#
#
captures1<-c("/Users/student/Documents/Bats/Simulations/Run23Oct2013Perch0.5,Density=70,Speed=0.46,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=0,Captures.csv")#
settings<-"/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Settings.csv"#
sensors<-"/Users/student/Documents/Bats/Simulations/Run23Oct2013,Density=70,Speed=0.00012,Iterations=1-51,StepLength=300,CorrWalkMaxAngleChange=3.14159,Sensors.csv"#
#
subsample(captures,sensors,settings)
library(plotKML)
data(eberg_contours)
plotKML(eberg_contours)
plotKML(eberg)
data(eberg)
coordinates(eberg)<- Â±X+Y
coordinates(eberg)<- ~X+Y
plotKML(eberg["CLYNET_A"])
names(eberg)
plotKML(eberg["CLYMHT_A"])
library(sp)
plotKML(eberg["CLYNET_A"])
plotKML(eberg["CLYNET_A",])
plotKML(eberg_contours)
getwd()
library(CircStats)
?dwrcauchy
?dwrpcauchy
dweibull
?dweibull
plot(rweibull(1000,8,1))
hist(rweibull(1000,8,1))
hist(rweibull(1000,800,1))
hist(rweibull(1000,8,800))
4/27
3/27
3.5/27
3.5/27.5
7*8
7*4
7*4*6
26*26
4*8
5000/750
360-90-138
132/3
132/3*2
1+8+8+6
13+16+18+15+16
7.38*37.5
7.38*37.5*4*3
8.8*37.5*4*3
8.8*37.5
65*5*6
65*5*4*3
37.68/pi
sqrt(37.68/pi)
2*sqrt(2)
sqrt(37.68)
sqrt(37.68)/pi
sqrt(37.68/pi)
1/sqrt(37.68/pi)
13/47
29/47
36/47
4/47
sqrt(2^2+2^2)
9109*4
9109/4
9109/(24*4)
900/60
9109/(24*4)
0.176/0.469
(0.469-0.176)/0.469
38/4
5*5
5*6
5*1
5*5+5
5*10+5
Project title: Calculating denisty of animals from number of captures ##
# Project: Bat Project					                            	##
#                                                                   	##
# Author: Elizabeth Moorcroft                                       	##
# Date created: Who knows?!                                         	##
#                                                                  	 	##
# Edited by: -                                                     		##
# Edited on: -			                                            	##
#                                                                   	##
# Script title: Density calculation	         	                    	##
# Script purpose:Calculate the density form the simulation using		##
#                  - Tim's Function	(Not implemented)			        ##
#                  - Marcus' Function                    				##
#                                                                   	##
##########################################################################
rm(list=ls(all=TRUE)) #
#
######################
# Libraries 		##
######################
library("RColorBrewer")#
library("plotrix")#
######################
# Directory			##
######################
DIR_DATA<-"/Users/student/Documents/Bats/Simulations"#
DIR_SAVE<-"/Users/student/Documents/Bats/Simulations"#
DIR_IMG<-"/Users/student/Documents/Bats/lucasMoorcroftManuscript/imgs"#
DIR_CODE<-"/Users/student/Documents/Bats/R analysis code"#
######################
# Source code		##
######################
setwd(DIR_CODE)#
source("Tim's original bat code.R")#
source("calculateProfileWidth.R")#
######################
# Colours 			##
######################
COLset1=brewer.pal(9,"Set1")#
COLset2=brewer.pal(8,"Set2")#
COLset3=brewer.pal(12,"Set3")#
#
COLsets=rep(c(COLset1,COLset2,COLset3),4)#
#
COLset3=brewer.pal(12,"Set3")#
#
##################################
# Load in Settings				##
##################################
setwd(DIR_DATA)#
Settings<-read.csv("Run23Oct2013Perch0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Settings.csv")#
Cameras<-read.csv("Run23Oct2013Perch0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0,Sensors.csv")#
#
##################################
# Setting variables				##
##################################
NoOfIterations	<-100 #Settings[which(Settings[,1] %in% "NoOfIterations"),2]#
Seed			<-Settings[which(Settings[,1] %in% "Seed"),2]#
NoOfSteps		<-Settings[which(Settings[,1] %in% "NoSteps"),2]#
StepLength		<-Settings[which(Settings[,1] %in% "StepLength"),2]#
CameraCallRadius<-Settings[which(Settings[,1] %in% "DetectorRadius"),2]#
CameraSpeed		<-Settings[which(Settings[,1] %in% "SpeedCamera"),2]#
Speed			<-Settings[which(Settings[,1] %in% "AnimalSpeed"),2]#
NoofAnimals		<-Settings[which(Settings[,1] %in% "NoOfAnimals"),2]#
Area			<-Settings[which(Settings[,1] %in% "Area"),2]#
LengthMonitoring<-Settings[which(Settings[,1] %in% "LengthMonitoring"),2]#
Time			<-NoOfSteps*StepLength#
Density			<-NoofAnimals/(Area)
loadindata<-read.csv("Run23Oct2013Perch0,Density=70,Speed=0.46,Iterations=1-101,StepLength=900,CorrWalkMaxAngleChange=0Save.csv",header=FALSE)#
#
x<-loadindata[,-dim(loadindata)[2]]#
#
Data<-x[-c(1:3),-1]#
header<-x[c(1:3),-1]#
callwidth<-names(table(as.numeric(header[2,])))#
radii<-names(table(as.numeric(Cameras[,6])))#
camerawidth<-names(table(as.numeric(Cameras[,5])))#
dimension<-dim(Data)[2]#
Matrix<-matrix(nrow=length(camerawidth),ncol=length(callwidth))#
colnames(Matrix)<-callwidth; rownames(Matrix)<-camerawidth#
MatrixNum<-matrix(nrow=length(camerawidth),ncol=length(callwidth))#
colnames(MatrixNum)<-callwidth; rownames(MatrixNum)<-camerawidth#
MatrixSD<-matrix(nrow=length(camerawidth),ncol=length(callwidth))#
colnames(MatrixSD)<-callwidth; rownames(MatrixSD)<-camerawidth#
MatrixTest<-matrix(nrow=length(camerawidth),ncol=length(callwidth))#
colnames(MatrixTest)<-callwidth; rownames(MatrixTest)<-camerawidth#
#
#for(i in 1:dim(Data)[2]){#
for(i in 1:84){#
	print(paste("I:",i))#
	CamerarowI	<-which(header[1,i]==Cameras[,1])	#
	CameraWidthI<-Cameras[CamerarowI,5]*2	#
	CameraRadiI	<-Cameras[CamerarowI,6]#
	CallAngleI	<-header[2,i]*2#
	#print(paste("Callangle",CallAngleI,"Camerawidth",CameraWidthI))#
	profilewidth<-calcProfileWidth(CallAngleI, CameraWidthI, CameraRadiI )#
	#print(paste("profilewidth:", profilewidth[[1]]))#
	tempest<-c()#
	tempdata<-c()#
	tempper<-c()#
	for(j in 1:dim(Data)[1]){#
		if(Data[j,i]==0){tempest<-c(tempest,0)}#
		else{tempest<-c(tempest,(1/profilewidth[[1]])*Data[j,i]/(Speed*Time))}#
		tempper<-#
		tempdata<-c(tempdata,Data[j,i])#
	}#
#
	m<-mean(tempest,na.rm=T)#
	sd1<-sd(tempest,na.rm=T)#
	p<-100*(tempest-Density)/Density#
	#print(summary(tempest))#
	if(CameraRadiI==100){			#
		rownum<-which(abs(as.numeric(camerawidth) - CameraWidthI/2)<0.1)#
		colnum<-which(abs(as.numeric(callwidth) - CallAngleI/2)<0.1)#
		#print(paste("HELLO", rownum, colnum))#
		Matrix[rownum,colnum]<-m#
		MatrixNum[rownum,colnum]<-mean(tempdata)#
		MatrixSD[rownum,colnum]<-sd(p,na.rm=T)#
		MatrixTest[rownum,colnum]<-wilcox.test(tempest[-c(1,length(tempest))],Density)$p.value#
		#print(paste("P-value",MatrixTest[rownum,colnum]))#
	}#
}#
cols<-brewer.pal(9,"YlOrRd")#
ramp<-colorRampPalette(brewer.pal(11,"Spectral"))(500)
library(fields)#
par(mar=c(5,5,5,7))#
image(z=MatrixSD,x=as.numeric(camerawidth)*2,y=as.numeric(callwidth)*2#
			, col=rev(brewer.pal(11,"Reds"))#
			, xlab="Sensor width", ylab="Call width"#
			, axes=FALSE#
			,main="")#
mtext(side=2,at=c(0,pi,2*pi),text=expression(0, pi, 2*pi))#
mtext(side=1,at=c(0,pi,2*pi),text=expression(0, pi, 2*pi))#
image.plot(MatrixSD, col=rev(brewer.pal(11,"Spectral")), legend.only=TRUE)#
box()
library(fields)#
par(mar=c(5,5,5,7))#
image(z=MatrixSD,x=as.numeric(camerawidth)*2,y=as.numeric(callwidth)*2#
			, col=(brewer.pal(11,"Reds"))#
			, xlab="Sensor width", ylab="Call width"#
			, axes=FALSE#
			,main="")#
mtext(side=2,at=c(0,pi,2*pi),text=expression(0, pi, 2*pi))#
mtext(side=1,at=c(0,pi,2*pi),text=expression(0, pi, 2*pi))#
image.plot(MatrixSD, col=(brewer.pal(11,"Reds")), legend.only=TRUE)#
box()
setwd(DIR_IMG)#
pdf("ResultStandardDeviation.pdf")#
library(fields)#
par(mar=c(5,5,5,7))#
image(z=MatrixSD,x=as.numeric(camerawidth)*2,y=as.numeric(callwidth)*2#
			, col=(brewer.pal(11,"Reds"))#
			, xlab="Sensor width", ylab="Call width"#
			, axes=FALSE#
			,main="")#
mtext(side=2,at=c(0,pi,2*pi),text=expression(0, pi, 2*pi))#
mtext(side=1,at=c(0,pi,2*pi),text=expression(0, pi, 2*pi))#
image.plot(MatrixSD, col=(brewer.pal(11,"Reds")), legend.only=TRUE)#
box()#
dev.off()
